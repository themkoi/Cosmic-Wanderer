import { ListView, VerticalBox, LineEdit } from "std-widgets.slint";

export struct AppItem {
    app_name: string,
    comment: string,
    icon: image,
}

export struct Theme {
    window-background: color,
    selected-item-background: color,
    selected-text-color: color,
    unselected-text-color: color,
    item-height: length,
    item-spacing: length,
    item-border-radius: length,
    icon-size: length,
    input-font-size: length,
    text-font-size: length,
    comment-font-size: length,
    font-family: string,
    font-weight: int,
    window-width: length,
    window-height: length,
    input-height: length,
}

export global Palette {
    in property <color> foreground-color;
    in property <color> background-color;
}

export component AppWindow inherits Window {
    in property <Theme> theme: {
        window-background: rgb(30, 30, 46, 0.6),
        selected-item-background: rgb(203, 166, 247, 1),
        selected-text-color: rgb(24, 24, 37, 1),
        unselected-text-color: rgb(205, 214, 244,1),
        item-height: 65px,
        item-spacing: 5px,
        icon-size: 48px,
        input-font-size: 20px,
        font-family: "JetBrainsMono NF SemiBold",
        text-font-size: 17px,
        comment-font-size: 12px,
        font-weight: 650,
        window-width: 400px,
        window-height: 580px,
        item-border-radius: 10px,
        input-height: 70px
    };
    width: self.theme.window-width;
    height: self.theme.window-height;
    no-frame: true;
    title: "Cosmic Wanderer";

    in-out property <[AppItem]> appItems;
    in-out property <bool> focused: true;
    in-out property <bool> scopeFocused: true;
    in-out property <int> selected_index: 0;
    in-out property <length> scroll_y: 0px;
    in-out property <string> text_input;
    callback focus_changed(bool);
    callback text_entered(string);
    callback item_clicked(int);

    public function focusText() {
        input.focus();
    }
    public function focusMain() {
        focus_handler.focus();
    }
    public function readFocus() {
        root.focused = TextInputInterface.text-input-focused;
        root.focus_changed(root.focused);
    }
    public function select_item(index: int) {
        root.selected_index = index;
    }

    forward-focus: focus_handler;
    focus_handler := FocusScope {
        focus-changed-event() => {
            root.scopeFocused = self.has-focus;
            root.focus_changed(root.focused);
        }

        key-pressed(event) => {
            if (event.text == Key.Escape) {
                root.scopeFocused = false;
                root.focus_changed(root.focused);
            }
            accept
        }

        input := LineEdit {
            text <=> root.text_input;
            horizontal-alignment: left;
            width: root.theme.window-width * 0.96;
            x: root.theme.window-width * 0.02;
            y: root.theme.window-width * 0.02;
            height: root.theme.input-height * 0.80;

            font-size: root.theme.input-font-size;

            key-pressed(event) => {
                if (event.text == Key.Escape) {
                    root.scopeFocused = false;
                    root.focus_changed(root.scopeFocused);
                    accept
                }
                if (event.text == Key.UpArrow) {
                    root.selected_index = Math.max(root.selected_index - 1, 0);
                    if (root.selected_index * root.theme.item-height - root.theme.item-height < -list.viewport_y + root.theme.item-height) {
                        list.viewport_y = -root.selected_index * root.theme.item-height + root.theme.item-height;
                    }
                    accept
                }
                if (event.text == Key.DownArrow) {
                    root.selected_index = Math.min(root.selected_index + 1, root.appItems.length - 1);
                    if ((root.selected_index + 1) * root.theme.item-height > (-list.viewport_y + root.theme.window-height - root.theme.item-height * 2)) {
                        list.viewport_y = -(root.selected_index * root.theme.item-height - (root.theme.window-height - 150px) + root.theme.item-height);
                    }
                    accept
                }
                reject
            }

            accepted => {
                root.item_clicked(selected_index);
            }

            edited => {
                root.text_entered(self.text);
            }
        }

        VerticalLayout {
            Rectangle {
                height: root.theme.input-height * 1.06;
            }

            list := ListView {
                for data[idx] in root.appItems: VerticalLayout {
                    height: root.theme.item-height;
                    width: parent.width;
                    spacing: root.theme.item-spacing;
                    touch := TouchArea {

                        Rectangle {
                            height: root.theme.item-height - 4px;
                            border-radius: root.theme.item-border-radius;
                            background: touch.has-hover || idx == selected_index ? root.theme.selected-item-background : rgb(0,0,0,0);
                            animate background { duration: 150ms; }
                            x: 5px;
                            width: parent.width - 40px;
                        }

                        Text {
                            font-weight: root.theme.font-weight;
                            overflow: elide;
                            font-family: root.theme.font-family;
                            font-size: root.theme.comment-font-size;
                            x: root.theme.icon-size + 25px;
                            y: root.theme.item-height * 0.40;
                            height: root.theme.item-height * 0.55;
                            width: root.theme.window-width - (root.theme.icon-size + 25px) - 40px;
                            vertical-alignment: center;
                            wrap: word-wrap;
                            text: data.comment;
                            color: touch.has-hover || idx == selected_index ? root.theme.selected-text-color : root.theme.unselected-text-color;
                            animate color { duration: 150ms; }
                        }

                        Text {
                            font-weight: root.theme.font-weight;
                            overflow: elide;
                            font-family: root.theme.font-family;
                            font-size: root.theme.text-font-size;
                            x: root.theme.icon-size + 25px;
                            y: data.comment == "" ? root.theme.item-height * 0.3 : root.theme.item-height * 0.12;
                            height: root.theme.text-font-size + 5px;
                            width: root.theme.window-width - (root.theme.icon-size + 25px) - 40px;
                            vertical-alignment: top;
                            text: data.app_name;
                            color: touch.has-hover || idx == selected_index ? root.theme.selected-text-color : root.theme.unselected-text-color;
                            animate color { duration: 150ms; }
                        }

                        Image {
                            source: data.icon;
                            width: root.theme.icon-size;
                            height: root.theme.icon-size;
                            x: root.theme.window-width * 0.0375;
                        }

                        clicked => {
                            selected_index = idx;
                            root.item_clicked(idx);
                        }
                    }
                }
            }
        }

        Rectangle {
            border-width: 100px;
            border-color: root.theme.selected-item-background;
            border-radius: root.theme.item-border-radius;
            height: root.theme.input-height - root.theme.input-height * 1.06;
            y: 70px;
            x: 0px;
        }
    }

    background: self.theme.window-background;
}
